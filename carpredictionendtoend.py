# -*- coding: utf-8 -*-
"""CarPredictionEndToEnd.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m7Lm7hB8Mqa4uaB2VZjMT0YO24rMzfuX
"""

!pip install flask-ngrok

import os
os.mkdir('templates')

index='''
<!DOCTYPE html>
<html lang="en">

<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width,initial-scale=1.0">
	<title>Document</title>
</head>

<body>
	<div style="color:blue">
		<form action="{{url_for('predict')}}" method="POST">
		<h2>Predictive analysis</h2>
		<h3>Year</h3>
		<input id="first" name="Year" type="number ">
		<h3>What is the Showroom  Price?(In lakhs)</h3><br><input id="second" name="Present_Price" required="required">
		<h3>How Many Kilometers Drived?</h3><input id="third" name="Kms_Driven" required="required">
		<h3>How many owners previously had the car(0 or 1 or 3)?</h3><br><input id="fourth" name="Owner" required="required">
		<h3>WHat is Fuel type?</h3><br><select name="Fuel_Type_Petrol" id="fuel" required="required">
			<option value="Petrol">Petrol</option>
			<option value="Diesel">Diesel</option>
			<option value="Diesel">CNG</option>
		</select>
		<h3>ARe you a Dealer or Individual</h3><br><select name="Seller_Type_Individual" id="resea" required="required">
			<option value="Dealer">Dealer</option>
			<option value="Individual">Individual</option>
		</select>
		<h3>Transmission type</h3><br><select name="Transmission_Manual" id="research" required="required">
			<option value="Manual">Manual Car</option>
			<option value="Automatic">Automatic Car</option>
		</select>
		<br><br><button id="sub" type="submit">Calculate the Selling Price</button>
		<br>
		</form>
		
		<br><br><br><h3>{{prediction_text}}</h3>
		</div>
		
		<style>
			body{
				background-color:lightslategray;
				text-align:center;
				paddng: 0px;
			}
			#research{
				font-size:18px;
				width:100px;
				height:23px;
				top:23px;
				}
				
			#box{
				border-radius :60px;
				border-color:45px;
				border-style:solid;
				font-family:cursive;
				text-align:center;
				background-color:rgb(168,131,61);
				font-size:medium;
				position:absolute;
				width:700px;
				bottom:9%;
				height:850px;
				right:30%;
				padding:0px;
				margin: 0px;
				font-size:14px;
				}
			#fuel{
				width:83px;
				height:43px;
				text-align:center;
				border-radius:14px;
				font-size:20px;
				}
			#fuel:hover{
				background-color:coral;
				}
			#research{
				width:99px;
				height:43px;
				text-align:center;
				border-radius:14px;
				font-size:18px;
				}
			#research:hover{
				background-color:coral;
			}
			#resea{
				width:99px;
				height:43px;
				text-align:center;
				border-radius:14px;
				font-size:18px;
			}
			#resea:hover{
				background-color:coral;
			}
			#sub{
				width:120px;
				height:43px;
				text-align:center;
				border-radius:14px;
				font-size:18px;
			}
			#sub:hover{
				background-color:darkcyan;
			}
			#first{
				border-radius:14px;
				height:25px;
				font-size:20px;
				text-align:center;
			}
			#second{
				border-radius:14px;
				height:25px;
				font-size:20px;
				text-align:center}
			#third{
				border-radius:14px;
				height:25px;
				font-size:20px;
				text-align:center;
			}
			#fourth{
				border-radius:14px;
				height:25px;
				font-size:20px;
				text-align:center;
			}
			
		</style>
	</body>
</html>
			
'''
file=open("templates/index.html","w")
file.write(index)
file.close()

!pip install jsonify

from flask import Flask,render_template,request
from flask_ngrok import run_with_ngrok
import jsonify
import requests
import pickle
import numpy as np
import sklearn
from sklearn.preprocessing import StandardScaler
app=Flask(__name__)

from google.colab import files
fil=files.upload()

run_with_ngrok(app)
model=pickle.load(open('random_forest_regression_model.pkl','rb'))
@app.route('/',methods=['GET'])
def Home():
  return render_template('index.html')
standard_to=StandardScaler()
@app.route('/predict',methods=['POST'])
def predict():
  Fuel_Type_Diesel=0
  if request.method=='POST':
    Year=int(float(request.form['Year']))
    Present_Price=float(request.form['Present_Price'])
    Kms_Driven=int(request.form['Kms_Driven'])
    Owner=int(request.form['Owner'])
    Fuel_Type_Petrol=request.form['Fuel_Type_Petrol']
    if (Fuel_Type_Petrol=='Petrol'):
      Fuel_Type_Petrol=1
      Fuel_Type_Diesel=0
    else:
      Fuel_Type_Petrol=0
      Fuel_Type_Diesel=1
    Year=2021-Year
    Seller_Type_Individual=request.form['Seller_Type_Individual']
    if (Seller_Type_Individual=='Individual'):
      Seller_Type_Individual=1
    else:
      Seller_Type_Individual=0
    Transmission_Manual=request.form['Transmission_Manual']
    if (Transmission_Manual=='Manual'):
      Transmission_Manual=1
    else:
      Transmission_Manual=0
    prediction=model.predict([[Present_Price,Kms_Driven,Owner,Year,Fuel_Type_Diesel,Fuel_Type_Petrol,Seller_Type_Individual,Transmission_Manual]])
    #output=round(prediction[0],2)
    #if output<0:
      #return render_template('index.html',prediction_text="Sorry you can't sell this car")
    #else:
    return render_template('index.html',prediction_text="You can sell the Car at {}".format(prediction))
  else:
    return render_template('index.html')
if __name__=="__main__":
  app.run()

run_with_ngrok(app)
@app.route('/',methods=['GET'])
def Home():
  return render_template('index.html')
standard_to=StandardScaler()
if __name__=="__main__":
  app.run()

